from aiogram import Bot, Dispatcher, types, F
import json
from aiogram.filters import Command

from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton

from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import asyncio
import os
# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv('telebot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π WebApp
def get_inline_webapp_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–∫—Ä—ã—Ç—å –ú–∞–ª–µ–Ω—å–∫–∏–π –ú—É–∫", web_app=WebAppInfo(url="https://xonre.github.io/telegram-mini-app/")) 
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏."
    )
    await message.answer(welcome_text, reply_markup=get_inline_webapp_keyboard())
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å web_app_data

@dp.message(F.content_type == "web_app_data")
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')
        amount = data.get('amount')
        balance = data.get('balance')
        
        if action == 'win':
            response = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {amount} ‚ÇΩ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ"
        elif action == 'lose':
            response = f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount} ‚ÇΩ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ"
        elif action == 'cashout':
            response = f"ü§ë –í—ã –∑–∞–±—Ä–∞–ª–∏ {amount} ‚ÇΩ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ"
        else:
            response = f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}"
            
        await message.answer(response)
    except json.JSONDecodeError:
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())